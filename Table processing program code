1. using System;
2. using System.Data.SQLite;
3. using System.Collections.Generic;
4. using System.IO;
5. using System.Data;
6. using MathNet.Numerics.Statistics;
7.
8.
9. namespace Interactions_with_database
10. {
11.
12. class SQLInteractions
13. {
14. private SQLiteConnection conn;
15. private string mydocumentsPath =
Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
16. private string filepath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) +
"\\CustomerData.db";
17. public void ExicuteQuery(string CommandText)
18. {
19. SQLiteCommand sqlite_cmd;
20. sqlite_cmd = conn.CreateCommand();
21. sqlite_cmd.CommandText = CommandText;
22. Console.WriteLine(CommandText);
23. sqlite_cmd.ExecuteNonQuery();
24. }
25.
26. public SQLInteractions()//works as a methood used within the exicution
27. {
28. try
29. {
30. this.conn = new SQLiteConnection(@"Data Source =" + filepath);
31. conn.Open();
32. SQLiteCommand sqlite_cmd;
33. sqlite_cmd = conn.CreateCommand();
34. sqlite_cmd.CommandText = "Select * From CustomerData ";
35. sqlite_cmd.ExecuteNonQuery();
36. }
37. catch (Exception)
38. {
39. Console.WriteLine("database file called CustomerData.db not found");
40.
41. System.Environment.Exit(1);
42. throw;
194
43. }
44. }
45. public void Close()
46. {
47. conn.Close();
48. }
49. }
50.
51. class MoneyPerDay : Table
52. {
53.
54. public override DataTable Create(DataSet DF)
55. {
56. Sheet = FindMMPD(DF);
57. return Sheet;
58. }
59. private DataTable CheckDate(ref DataTable MMPerday, DataTable MPPerTrans, ref int dayOyear,
int i, ref int k, ref int year)
60. {
61. if (year == 16)//As explained before to keep the day system consistent
62. //a constant - 365 is added is added if the year is 16
63. {
64. dayOyear = dayOyear - 365;
65. }
66. DataRow[] Rows = MMPerday.Select("Day = '" + dayOyear + "'");
67. if (Rows.Length > 0)
68. //If the day is already included in the Datatable Add onto the values of MoneySpent and
Frequencyofsale
69. {
70. Rows[0]["MoneySpent"] = Math.Round((double)Rows[0]["MoneySpent"]
71. +
(double)MPPerTrans.Rows[i].ItemArray[(int)MPPerTrans.Columns.IndexOf("MoneySpent")], 2);
72. Rows[0]["Frequencyofsale"] = (int)Rows[0]["Frequencyofsale"] + 1;
73. }
74. else
75. {//If the day is not part of the Datatable yet add it including all of its relevant values
76. DataRow row;
77. row = MMPerday.NewRow();
78. row["PrimaryKey"] = k;
79. k++;
80. row["Day"] = dayOyear;
81. row["MoneySpent"] = Math.Round((double)MPPerTrans.Rows[i].ItemArray[
82. (int)MPPerTrans.Columns.IndexOf("MoneySpent")], 2);
83. row["Frequencyofsale"] = 1;
84. row["Year"] = year;
85. MMPerday.Rows.Add(row);
86. }
87. return MMPerday;
88. }
89. private DataTable FindMMPD(DataSet df)
90. {
91. {
92. DataTable MMPerday = new DataTable("MoneyMadePerDay");
93.
94. DataTable MPPerTrans = df.Tables["MPPerTrans"];
95.
96. DataColumn column;
97.
98. string[] dattypes = new string[5];
99. string[] Tablenames = new string[5];
100.
101. column = new DataColumn();
102. column.DataType = System.Type.GetType("System.Int32");
103. column.ColumnName = "PrimaryKey";
104. column.ReadOnly = true;
105. MMPerday.Columns.Add(column);
106.
195
107. dattypes[0] = "VARCHAR";
108. Tablenames[0] = "PrimaryKey";
109.
110.
111. column = new DataColumn();
112. column.DataType = System.Type.GetType("System.Int32");
113. column.ColumnName = "Day";
114. column.ReadOnly = true;
115. MMPerday.Columns.Add(column);
116.
117. dattypes[1] = "INTAGAR";
118. Tablenames[1] = "Day";
119.
120.
121.
122. column = new DataColumn();
123. column.DataType = System.Type.GetType("System.Double");
124. column.ColumnName = "MoneySpent";
125. column.ReadOnly = false;
126. MMPerday.Columns.Add(column);
127.
128. dattypes[2] = "DECIMAL";
129. Tablenames[2] = "MoneySpent";
130.
131.
132. column = new DataColumn();
133. column.DataType = System.Type.GetType("System.Int32");
134. column.ColumnName = "Frequencyofsale";
135. column.ReadOnly = false;
136. MMPerday.Columns.Add(column);
137.
138. dattypes[3] = "INTAGAR";
139. Tablenames[3] = "Frequencyofsale";
140.
141. column = new DataColumn();
142. column.DataType = System.Type.GetType("System.Int32");
143. column.ColumnName = "Year";
144. column.ReadOnly = false;
145. MMPerday.Columns.Add(column);
146.
147. dattypes[4] = "INTAGAR";
148. Tablenames[4] = "Year";
149.
150. datatypes.addValues(dattypes);
151. tablenames.addValues(Tablenames);
152.
153. DataColumn[] PrimaryKeyColumns = new DataColumn[1];
154. PrimaryKeyColumns[0] = MMPerday.Columns["PrimaryKey"];
155. MMPerday.PrimaryKey = PrimaryKeyColumns;
156.
157. {
158. int k = 0;
159. for (int i = 0; i < MPPerTrans.Rows.Count; i++)
160. {
161. string date = "";
162. date =
(string)MPPerTrans.Rows[i].ItemArray[(int)MPPerTrans.Columns.IndexOf("InvoiceDate")];
163. Tuple<int, int> DayandYear = GetDate(date);
164. //Uses a Method from the abstract Table class
165. int dayOyear = DayandYear.Item1;
166. int year = DayandYear.Item2;
167. CheckDate(ref MMPerday, MPPerTrans, ref dayOyear, i, ref k, ref year);
168. }
169. }
170.
171.
172. return MMPerday;
196
173.
174.
}
175.
}
176.
}
177. class CQI : Table
178.
{
179.
180. public override DataTable Create
(DataSet df
)
181.
{
182. DataTable CQItable = AddData(df);
183.
184. Sheet = CQItable;
185.
186. return CQItable;
187.
}
188. private DataTable AddData
(DataSet df
)
189.
{
190. //fill columns
191. DataColumn column;
192. DataTable Spent = df.Tables["Spent"];
193. DataTable MPPerTrans = df.Tables["MPPerTrans"];
194.
195. DataTable CQIData = new DataTable("CQI");
196.
197. string[] dattypes = new string
[
6];
198. string[] Tablenames = new string
[
6];
199.
200. column = new DataColumn();
201. column.DataType = System.Type.GetType("System.Int32");
202. column.ColumnName = "PrimaryKey"
;
203. column.ReadOnly = true
;
204. CQIData.Columns.Add(column);
205.
206. dattypes[
0] = "VARCHAR"
;
207. Tablenames[
0] = "PrimaryKey"
;
208.
209.
210.
211. column = new DataColumn();
212. column.DataType = System.Type.GetType("System.Int32");
213. column.ColumnName = "CustomerID"
;
214. column.ReadOnly = true
;
215. CQIData.Columns.Add(column);
216.
217. dattypes[
1] = "VARCHAR"
;
218. Tablenames[
1] = "CustomerID"
;
219.
220.
221.
222. column = new DataColumn();
223. column.DataType = System.Type.GetType("System.Double");
224. column.ColumnName = "MoneySpentOvertime"
;
225. column.ReadOnly = true
;
226. CQIData.Columns.Add(column);
227.
228. dattypes[
2] = "DECIMAL"
;
229. Tablenames[
2] = "MoneySpentOvertime"
;
230.
231.
232.
233. column = new DataColumn();
234. column.DataType = System.Type.GetType("System.Double");
235. column.ColumnName = "StandardDiv"
;
236. column.ReadOnly = true
;
237. CQIData.Columns.Add(column);
238.
239.
dattypes[
3] = "DECIMAL"
;
197
240. Tablenames[3] = "StandardDiv";
241.
242.
243.
244. column = new DataColumn();
245. column.DataType = System.Type.GetType("System.Int32");
246. column.ColumnName = "Frequency";
247. column.ReadOnly = true;
248. CQIData.Columns.Add(column);
249.
250. dattypes[4] = "INTAGAR";
251. Tablenames[4] = "Frequency";
252.
253.
254.
255. column = new DataColumn();
256. column.DataType = System.Type.GetType("System.Double");
257. column.ColumnName = "CQI";
258. column.ReadOnly = true;
259. CQIData.Columns.Add(column);
260.
261. dattypes[5] = "DECIMAL";
262. Tablenames[5] = "CQI";
263.
264.
265.
266. datatypes.addValues(dattypes);
267. tablenames.addValues(Tablenames);
268.
269.
270.
271.
272. DataColumn[] PrimaryKeyColumns = new DataColumn[1];
273. PrimaryKeyColumns[0] = CQIData.Columns["PrimaryKey"];
274. CQIData.PrimaryKey = PrimaryKeyColumns;
275.
276. DataRow row;
277.
278. for (int i = 0; i < Spent.Rows.Count; i++)
279. {
280. //runs through the Datatable looking for every index of the ID
281. //loads all of those indexes and gets all the money per trans
282. //gets SD of that then sends it to SD
283. //solves problems of SD and ID not maching
284. row = CQIData.NewRow();
285.
286. DataRow[] Rows = MPPerTrans.Select("CustomerID = '" +
Spent.Rows[i].ItemArray[(int)Spent.Columns.IndexOf("CustomerID")] + "'");
287. double[] DataforSD = new double[Rows.Length];
288. int y = 0;
289. foreach (DataRow item in Rows)
290. {
291. DataforSD[y] =
(double)item.ItemArray[(int)MPPerTrans.Columns.IndexOf("MoneySpent")];
292. //Fills a array with the Money Spent of each transaction the CustomerID is present in
293. }
294.
295. double SD = 0;
296. SD = this.GetSD(DataforSD);
297. //Utilizes the GetSD method of the abstract Table class.
298.
299. row["PrimaryKey"] = i;
300. row["CustomerID"] =
(int)Spent.Rows[i].ItemArray[(int)Spent.Columns.IndexOf("CustomerID")];
301. row["MoneySpentOvertime"] =
(double)Spent.Rows[i].ItemArray[(int)Spent.Columns.IndexOf("MoneySpentOvertime")];
302. row["StandardDiv"] = (double)SD;
198
303. row["Frequency"] = Rows.Length;
304. double h = 0;
305. if (SD == 0) // Makes sure the system does not attempt to divide by 0
306. {
307. h = 0;
308. }
309. else//Money spent overtime * Frequence / SD
310. {
311. double j =
(double)Spent.Rows[i].ItemArray[(int)Spent.Columns.IndexOf("MoneySpentOvertime")] * Rows.Length;
312. h = j / SD;
313.
314. }
315. row["CQI"] = h;
316.
317. CQIData.Rows.Add(row);
318. }
319.
320.
321.
322. return CQIData;
323. }
324.
325.
326.
327. }
328. class SpentOver : Table
329. {
330.
331. public override DataTable Create(DataSet DataSet)
332. {
333. DataTable Spent = new DataTable("Spent");
334. IDSpentOvertime(ref Spent, DataSet);
335.
336. Sheet = Spent;
337.
338. return Spent;
339. }
340.
341. private void IDSpentOvertime(ref DataTable Spent, DataSet DataSet)
342. {
343. {
344. Dictionary<int, double> MoneySpent = new Dictionary<int, double>();
345. TallyMP(ref MoneySpent, DataSet);
346.
347. DataColumn column;
348.
349. string[] dattypes = new string[3];
350.
351. string[] Tablenames = new string[3];
352.
353.
354. column = new DataColumn();
355. column.DataType = System.Type.GetType("System.Int32");
356. column.ColumnName = "PrimaryKey";
357. column.ReadOnly = true;
358. Spent.Columns.Add(column);
359.
360. dattypes[0] = "INTAGAR";
361. Tablenames[0] = "PrimaryKey";
362.
363.
364.
365. column = new DataColumn();
366. column.DataType = System.Type.GetType("System.Int32");
367. column.ColumnName = "CustomerID";
368. column.ReadOnly = true;
199
369. Spent.Columns.Add(column);
370.
371. dattypes[1] = "VARCHAR";
372. Tablenames[1] = "CustomerID";
373.
374.
375.
376. column = new DataColumn();
377. column.DataType = System.Type.GetType("System.Double");
378. column.ColumnName = "MoneySpentOvertime";
379. column.ReadOnly = true;
380. Spent.Columns.Add(column);
381.
382. dattypes[2] = "DOUBLE";
383. Tablenames[2] = "MoneySpentOvertime";
384. int i = 1;
385.
386.
387. datatypes.addValues(dattypes);
388. tablenames.addValues(Tablenames);
389.
390. DataColumn[] PrimaryKeyColumns = new DataColumn[1];
391. PrimaryKeyColumns[0] = Spent.Columns["PrimaryKey"];
392. Spent.PrimaryKey = PrimaryKeyColumns;
393. DataRow row;
394. foreach (KeyValuePair<int, double> kk in MoneySpent)
395. {
396. Console.WriteLine(" yeeet " + kk.Key + " " + kk.Value);
397. row = Spent.NewRow();
398. row["PrimaryKey"] = i;
399. row["CustomerID"] = kk.Key;
400. row["MoneySpentOvertime"] = kk.Value;
401.
402. Spent.Rows.Add(row);
403. i++;
404. }
405.
406. }
407.
408. }
409. private static Dictionary<int, double> TallyMP(ref Dictionary<int, double> MoneySpent, DataSet
DataSet)
410. {
411. //tally for money spent by each client in the same time
412. DataTable table = DataSet.Tables["MotherDF"];
413.
414. for (int i = 1; i < table.Rows.Count; i++)///can be Changed into operations class in table
415. {
416. double counter = 0;
417. if
(MoneySpent.ContainsKey((int)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("CustomerID")]))
418. {
419. }
420. else
421. {
422. DataRow[] ContainsInv = table.Select("CustomerID = '" +
table.Rows[i].ItemArray[(int)table.Columns.IndexOf("CustomerID")] + "'");
423. foreach (DataRow item in ContainsInv)
424. {
425. counter = counter + (double)item[table.Columns.IndexOf("MoneySpent")];
426.
427. }
428. MoneySpent.Add((int)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("CustomerID")],
counter);
429. }
430. }
431. return MoneySpent;
200
432. }
433. }
434. class MMpertrans : Table
435. {
436.
437. public override DataTable Create(DataSet DataSet)
438. {
439. DataTable MPPerTrans = new DataTable("MPPerTrans");
440. ADDcolumstoMP(ref MPPerTrans);
441.
442. FILLrowsMP(ref MPPerTrans, DataSet);
443. Sheet = MPPerTrans;
444.
445. return MPPerTrans;
446. }
447. private void FILLrowsMP(ref DataTable MPPerTrans, DataSet DataSet)
448. {
449. DataTable table = DataSet.Tables["MotherDF"]; // extracts the main Datatable from the dataset
450. DataRow row;
451.
452. List<string> Invoices = new List<string>();
453. for (int i = 1; i < (int)table.Rows.Count; i++)
454. {
455. double Counter = 0;
456. if (Invoices.Contains((string)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceNo")]))
457. //if the rows invoice number is already part of the list
458. {
459. }
460. else
461. {
462. Invoices.Add((string)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceNo")]);
463. //add it to list so ths following operation only occurs once
464.
465. DataRow[] ContainsInv = table.Select(string.Format("{0} LIKE '%{1}%'", "InvoiceNo",
466.
(string)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceNo")]));
467. //Selects all datarows within the main dataset where the invoice number is = to the rows
invoice number
468. foreach (DataRow item in ContainsInv)
469. {
470. //goes through each invoice number and tallies their value
471. Counter = Counter + (double)item[table.Columns.IndexOf("MoneySpent")];
472. }
473. row = MPPerTrans.NewRow();
474. row["InvoiceNo"] = table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceNo")];
475. row["MoneySpent"] = Math.Round(Counter);
476.
477. string invoicedate =
(string)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceDate")];
478. row["InvoiceDate"] = invoicedate;
479. row["CustomerID"] = table.Rows[i].ItemArray[(int)table.Columns.IndexOf("CustomerID")];
480. //utilizes a Table class method
481. Tuple<int, int> DateandYear =
GetDate((string)table.Rows[i].ItemArray[(int)table.Columns.IndexOf("InvoiceDate")]);
482.
483. if (DateandYear.Item2 == 16)
484. // Because there are years 17 and 16 and linear regression algorithims are to be taken
place between these periods there has to be
485. // a way of representing this so 0 is the moment of newyears, -1 is the 31st of december
2016 and 1 is january 1st of 2017
486. {
487. int adjustedday = DateandYear.Item1 - 365;
488. DateandYear = new Tuple<int, int>(adjustedday, DateandYear.Item2);
489. }
490.
491. row["NumericDate"] = DateandYear.Item1;
492. row["Year"] = DateandYear.Item2;
201
493.
494. MPPerTrans.Rows.Add(row);
495.
}
496.
497.
}
498.
499.
}
500.
501. private void ADDcolumstoMP
(ref DataTable MPPerTrans
)
502.
{
503.
{//creating columns
504.
505. DataColumn column; //MoneySpent,InvoiceDate,CustomerID
506.
507. column = new DataColumn();
508. column.DataType = System.Type.GetType("System.String");
509. column.ColumnName = "InvoiceNo"
;
510. column.ReadOnly = true
;
511. MPPerTrans.Columns.Add(column);
512.
513. string[] Tablenames = new string
[
6];
514. string[] dattypes = new strin
g
[
6];
515.
516. dattypes[
0] = "VARCHAR"
;
517. Tablenames[
0] = "InvoiceNo"
;
518.
519. column = new DataColumn();
520. column.DataType = System.Type.GetType("System.Double");
521. column.ColumnName = "MoneySpent"
;
522. column.ReadOnly = true
;
523. MPPerTrans.Columns.Add(column);
524.
525. dattypes[
1] = "DOUBLE"
;
526. Tablenames[
1] = "MoneySpent"
;
527.
528. column = new DataColumn();
529. column.DataType = System.Type.GetType("System.String");
530. column.ColumnName = "InvoiceDate"
;
531. column.ReadOnly = true
;
532. MPPerTrans.Columns.Add(column);
533.
534. dattypes[
2] = "VARCHAR"
;
535. Tablenames[
2] = "InvoiceDate"
;
536.
537. column = new DataColumn();
538. column.DataType = System.Type.GetType("System.Int32");
539. column.ColumnName = "CustomerID"
;
540. column.ReadOnly = true
;
541. MPPerTrans.Columns.Add(column);
542.
543. dattypes[
3] = "VARCHAR"
;
544. Tablenames[
3] = "CustomerID"
;
545.
546. column = new DataColumn();
547. column.DataType = System.Type.GetType("System.Int32");
548. column.ColumnName = "NumericDate"
;
549. column.ReadOnly = true
;
550. MPPerTrans.Columns.Add(column);
551.
552. dattypes[
4] = "INTAGAR"
;
553. Tablenames[
4] = "NumericDate"
;
554.
555. column = new DataColumn();
556. column.DataType = System.Type.GetType("System.Int32");
557. column.ColumnName = "Year"
;
558. column.ReadOnly = true
;
559. MPPerTrans.Columns.Add(column);
202
560.
561. dattypes[5] = "INTAGAR";
562. Tablenames[5] = "Year";
563.
564. datatypes.addValues(dattypes);
565. tablenames.addValues(Tablenames);
566.
567.
568. DataColumn[] PrimaryKeyColumns = new DataColumn[1];
569. PrimaryKeyColumns[0] = MPPerTrans.Columns["InvoiceNo"];
570. MPPerTrans.PrimaryKey = PrimaryKeyColumns;
571.
572. }
573. }
574. }
575.
576. class l1st
577. {
578. string[] tableNames = new string[8];
579.
580. public void addValues(string[] values)
581. {
582. for (int i = 0; i < values.Length; i++)
583. {
584. tableNames[i] = values[i];
585. }
586. }
587.
588. public string[] returnvalues()
589. {
590. return this.tableNames;
591. }
592. }
593. abstract class Table
594. {
595.
596. protected DataTable Sheet;
597. protected const int amountofdataRows =40000;
598. protected string filepath = Environment.GetFolderPath(
599. Environment.SpecialFolder.MyDocuments) + "\\CustomerData.db";
600.
601. protected l1st datatypes = new l1st();
602. protected l1st tablenames = new l1st();
603.
604. virtual public DataTable Create(DataSet M )
605. {
606. return null;
607. }
608. public Tuple<int,int> GetDate(string date)
609. {
610. //This class converts a string date format of date-month-year into numerical formats
611. //using substrings.
612. //the date format date-month-year
613.
614. int day = Convert.ToInt32(date.Substring(0, date.IndexOf('-')));
615. string s = date.Substring(date.IndexOf('-') + 1, 2);
616. Console.WriteLine(s);
617. int month = Convert.ToInt32(s);
618. int year = Convert.ToInt32(date.Substring(date.LastIndexOf('-') + 1));
619.
620. int dayOyear = day + (30) * (month - 1);
621.
622. Tuple<int, int> DayandYear = new Tuple<int, int>(dayOyear, year);
623.
624. return DayandYear;
625. }
626. public void getUQID(string name, string Columnname, string Col2)
203
627. {
628. // takes in the parameters name, Columnname and Col2, the first 2 work similar to the measures
of spread document however Col2 is the
629. // name of the rows column we want the system to store if a row’s Columnname is greater than
the Upper quartile
630. //gets the top quartile of customers
631. StreamReader reader = new StreamReader("Mesure Of Spread Document\\" +
Sheet.TableName + "\\ " + Columnname + " " + amountofdataRows);
632. string UQT = "";
633. for (int y = 0; y < 8; y++)
634. {
635. UQT = reader.ReadLine();
636. }//puts the reader on the right line
637. reader.Close();
638. double UQ = Convert.ToDouble(UQT);
639.
640. if (!Directory.Exists("top25"))
641. {
642. Directory.CreateDirectory("top25");
643. }
644. if (!Directory.Exists("top25\\" + Sheet.TableName))
645. {
646. Directory.CreateDirectory("top25\\" + Sheet.TableName);
647.
648. }
649. File.Create("top25\\" + Sheet.TableName + "\\ " + Sheet.TableName + " " +
amountofdataRows).Dispose();
650. using (StreamWriter writer = new StreamWriter("top25\\" + Sheet.TableName + "\\ " +
Columnname + " " + amountofdataRows))
651. {
652. List<double> top25ID = new List<double>();
653. bool Freq = false;
654. try
655. {
656. string checkF = Columnname.Substring(0, 9);
657. if (checkF == "Frequency")
658. {
659. Freq = true;
660. }
661. }
662. catch
663. {
664. }
665. for (int i = 0; i < Sheet.Rows.Count; i++)
666. {
667. //Frequency
668. if (Freq == true)// stored as int so has to be cast as int value
669. {
670. double TestColumn =
(int)this.Sheet.Rows[i].ItemArray[this.Sheet.Columns.IndexOf(Columnname)];
671. Math.Round(TestColumn);
672.
673. if (TestColumn > UQ)
674. {
675. int j =
Convert.ToInt32(this.Sheet.Rows[i].ItemArray[this.Sheet.Columns.IndexOf(Col2)]);
676.
677. top25ID.Add(j);
678. }
679. }
680. else
681. {
682. double TestColumn =
(double)this.Sheet.Rows[i].ItemArray[this.Sheet.Columns.IndexOf(Columnname)];
683. Math.Round(TestColumn);
684.
685. if (TestColumn > UQ)
204
686. {
687. int j =
Convert.ToInt32(this.Sheet.Rows[i].ItemArray[this.Sheet.Columns.IndexOf(Col2)]);
688.
689. top25ID.Add(j);
690. }
691. }
692. }
693. SQLInteractions link = new SQLInteractions();
694. foreach (double item in top25ID)
695. {
696. writer.WriteLine(item);
697. }
698. string CreateTable2 = "drop table if exists " + Sheet.TableName + "Top25" + Columnname;
699.
700. link.ExicuteQuery(CreateTable2);
701.
702. string CreateTable = "CREATE TABLE" + " " + Sheet.TableName + "Top25"+ Columnname +
"( Top25 INTAGAR);";
703.
704. link.ExicuteQuery(CreateTable);
705.
706. foreach (double item in top25ID)
707. {
708. string data = "INSERT INTO" + " " + Sheet.TableName + "Top25"+ Columnname + "(Top25)
VALUES(" + item+");";
709.
710. link.ExicuteQuery(data);
711. }
712. }
713. }
714.
715.
716.
717. public void CreateMesureOfSpreadDocument(string Name, string Columnname)
718. {
719. List<double> ValuesTouse = new List<double>();
720. for (int i = 0; i < this.Sheet.Rows.Count; i++)
721. {
722.
ValuesTouse.Add((double)Convert.ToDouble(this.Sheet.Rows[i].ItemArray[this.Sheet.Columns.IndexOf(
Columnname)]));
723. }
724. double[] CompiledData = ValuesTouse.ToArray();
725. double[] MMSpread = new double[8];
726. MesuresOfSpread(ref CompiledData, ref MMSpread);
727. if (!Directory.Exists("Mesure Of Spread Document"))
728. {
729. Directory.CreateDirectory("Mesure Of Spread Document");
730. }
731. if (!Directory.Exists("Mesure Of Spread Document\\" + Sheet.TableName))
732. {
733. Directory.CreateDirectory("Mesure Of Spread Document\\" + Sheet.TableName);
734. }
735. File.Create("Mesure Of Spread Document\\" + Sheet.TableName + "\\ " + Columnname + " " +
amountofdataRows).Dispose();
736.
737. using (StreamWriter writer = new StreamWriter("Mesure Of Spread Document\\" +
Sheet.TableName +
738. "\\ " + Columnname + " " + amountofdataRows))
739. {
740. foreach (double item in MMSpread)
741. {
742. writer.WriteLine(item);
743. }
744. writer.WriteLine();
745. writer.WriteLine("1. mean 2. SD 3. IQR 4.Min - Max 5-7. Quartiles");
205
746. writer.WriteLine(Columnname);
747. }
748. }
749.
750. private double[] MesuresOfSpread(ref double[] CompiledData, ref double[] VMesuresofspread)
751. {
752.
753. double Mean = Statistics.Mean(CompiledData); //mnean that ignors top 0.1 and bottem 0.1
754.
755. double SD = GetSD(CompiledData); //SD that ignores the many null values
756.
757. double IQR = Statistics.InterquartileRange(CompiledData); //IQR that ignores the many null
values
758.
759. double Max = Statistics.Maximum(CompiledData); //IQR that ignores the many null values
760.
761. double Min = Statistics.Minimum(CompiledData);
762.
763. double LQ = Statistics.LowerQuartile(CompiledData);
764.
765. double Medium = Statistics.Median(CompiledData);
766.
767. double UQ = Statistics.UpperQuartile(CompiledData);
768.
769. VMesuresofspread[0] = Mean;
770. VMesuresofspread[1] = SD;
771. VMesuresofspread[2] = IQR;
772. VMesuresofspread[3] = Max;
773. VMesuresofspread[4] = Min;
774. VMesuresofspread[5] = LQ;
775. VMesuresofspread[6] = Medium;
776. VMesuresofspread[7] = UQ;
777.
778. return VMesuresofspread;
779.
780. }
781.
782.
783. protected double GetSD(double[] SDData)
784. {
785. //SD formula = Squarroot ( (sum X^2)/size - (sum X /size)^2)
786. double sum = 0;
787. double sumSq = 0;
788.
789. foreach (double item in SDData)
790. {
791. sum = sum + item;
792.
793. sumSq = sumSq + (item * item);
794. }
795. return Math.Sqrt((sumSq / SDData.Length) - ((sum / SDData.Length) * (sum / SDData.Length)));
796.
797. }
798. public void SaveData()
799. {
800. SQLInteractions link = new SQLInteractions();
801. //create table if not exists TableName (col1 typ1, ..., colN typN)
802. //drop table if exists TableName
803.
804. string CreateTable2 = "drop table if exists " + Sheet.TableName;
805.
806. link.ExicuteQuery(CreateTable2);
807.
808.
809. string CreateTable = "CREATE TABLE" + " " + Sheet.TableName + "( " +
MakeColumsreadyForSQL(false) + " );"; ;
810.
206
811. link.ExicuteQuery(CreateTable);
812. InsertData();
813.
814.
815. }
816. private string MakeColumsreadyForSQL(bool Rows) // has a bool to see if this is for the insert or
not as the data types are used to create the table but not when inserting
817. {
818.
819. string[] Datatypes = datatypes.returnvalues();
820.
821. string data = "";
822. for (int i = 0; i < Sheet.Columns.Count; i++)
823. {
824. if (i == (Sheet.Columns.Count - 1))
825. {
826. if (Rows == true)
827. {
828. data = data + Sheet.Columns[i].ColumnName + " ";
829. }
830. else
831. {
832. data = data + Sheet.Columns[i].ColumnName + " " + Datatypes[i];
833. }
834. }
835. else
836. {
837. if (Rows == true)
838. {
839. data = data + Sheet.Columns[i].ColumnName + "," + " ";
840. }
841. else
842. {
843. data = data + Sheet.Columns[i].ColumnName + " " + Datatypes[i] + ", ";
844. }
845. }
846. }
847. return data;
848. }
849. private SQLiteConnection CreateSQLconnection()//works as a methood used within the exicution
850. {
851. SQLiteConnection ll = new SQLiteConnection(@"Data Source =" + filepath);
852. ll.Open();
853. return ll;
854. }
855.
856.
857. private string MakeRowsReadyforSQL(int i)
858. {
859. string data = "";
860.
861. for (int j = 0; j < Sheet.Columns.Count; j++)
862. {
863.
864. if (j == (Sheet.Columns.Count - 1))
865. {
866.
867. data = data + Sheet.Rows[i].ItemArray[j];
868. }
869. else
870. {
871. try
872. {
873. string date = (string)Sheet.Rows[i].ItemArray[j];
874.
875. if (date.Contains('-'))
876. {
207
877. date = "\'" + date + "\'";
878. data = data + date + ", ";
879. }
880. else
881. {
882. data = data + Sheet.Rows[i].ItemArray[j] + ", ";
883. }
884.
885. }
886. catch (Exception)
887. {
888. data = data + Sheet.Rows[i].ItemArray[j] + ", ";
889.
890. }
891.
892. }
893. }
894. return data;
895. }
896. private void InsertData()
897. {
898. SQLInteractions link = new SQLInteractions();
899. for (int i = 0; i < Sheet.Rows.Count; i++)
900. {
901.
902. string InsertText = "INSERT INTO" + " " + Sheet.TableName + "( " +
MakeColumsreadyForSQL(true) + ")" + " VALUES(" + MakeRowsReadyforSQL(i) + "); ";
903.
904. link.ExicuteQuery(InsertText);
905. }
906. }
907.
908. }
909. class MainSet : Table
910. {
911. public DataSet dataSet = new DataSet();
912. private void PreliminaryCleaning()
913. {//Cleans known errors before they have to be loaded and unloaded into the datatable
914. SQLInteractions Removal = new SQLInteractions();
915. string text = "delete from CustomerData where InvoiceNo=' ' OR InvoiceNo IS NULL;";
916. Removal.ExicuteQuery(text);
917. text = "delete from CustomerData where StockCode=' ' OR StockCode IS NULL;";
918. Removal.ExicuteQuery(text);
919. text = "delete from CustomerData where Description=' ' OR Description IS NULL;";
920. Removal.ExicuteQuery(text);
921. text = "delete from CustomerData where Quantity=' ' OR Quantity IS NULL;";
922. Removal.ExicuteQuery(text);
923. text = "delete from CustomerData where InvoiceDate=' ' OR InvoiceDate IS NULL;";
924. Removal.ExicuteQuery(text);
925. text = "delete from CustomerData where UnitPrice=' ' OR UnitPrice IS NULL;";
926. Removal.ExicuteQuery(text);
927. text = "delete from CustomerData where CustomerID=' ' OR CustomerID IS NULL;";
928. Removal.ExicuteQuery(text);
929. text = "delete from CustomerData where Country=' ' OR Country IS NULL;";
930. Removal.ExicuteQuery(text);
931. text = "delete from CustomerData where InvoiceNo=' ' OR InvoiceNo IS NULL;";
932. Removal.ExicuteQuery(text);
933. text = "delete from CustomerData where StockCode='M';";
934. Removal.ExicuteQuery(text);
935. text = "delete from CustomerData where Quantity<0;";
936. Removal.ExicuteQuery(text);
937.
938. Removal.Close();
939. }
940. public MainSet()
941. {
942. PreliminaryCleaning();
208
943. string command1 = "SELECT * FROM CustomerData LIMIT " + amountofdataRows;
944. SQLiteConnection connection = CreateSQLconnection();
945. using var cmd = new SQLiteCommand(command1, connection);
946. SQLiteDataReader rdr = cmd.ExecuteReader();
947.
948. System.Data.DataTable table = new DataTable("MotherDF");
949.
950. ADDcolums(ref table);
951.
952. ADDrows(ref rdr, ref table);
953.
954. dataSet.Tables.Add(table);
955.
956. remove(table);
957.
958. }
959.
960. private void remove(DataTable table)
961. {
962. List<int> rows = new List<int>();
963. using (StreamReader reader = new StreamReader("BrokenRows " + amountofdataRows))
964. //uses the + to make sure it uses the correct text file
965. {
966. reader.ReadLine();
967. while (reader.ReadLine() != null)
968. {
969. rows.Add(Convert.ToInt32(reader.ReadLine()));
970. // reads all lines from broken rows adding them to a list
971. }
972. }
973. //Deletes the File afterwards to ensue ame primary keys are not read and deleted twice
974. File.Delete("BrokenRows " + amountofdataRows);
975. SQLInteractions Removal = new SQLInteractions();
976. foreach (int item in rows)
977. {
978. string ComandText = "DELETE FROM CustomerData WHERE Primarykey = " + item + ";";
979. Console.WriteLine(ComandText);
980. Removal.ExicuteQuery(ComandText);
981. }
982. //This is removing all traces of broken rows that remain in the dataset that might break the
system overall
983.
984. dataSet.Tables.Remove(table);
985. //This Removes the table and re creates the table with the new cleaned dataset
986.
987. string command1 = "SELECT * FROM CustomerData LIMIT " + amountofdataRows;
988. SQLiteConnection connection = CreateSQLconnection();
989. using var cmd = new SQLiteCommand(command1, connection);//needs to be redone
990. //write a cross table tabulation
991. SQLiteDataReader rdr = cmd.ExecuteReader();
992.
993. DataTable ReMadeTable = new DataTable("MotherDF");
994.
995. ADDcolums(ref ReMadeTable);
996.
997. ADDrows(ref rdr, ref ReMadeTable);
998.
999. //Re creates datatable with the cleaned data
1000.
1001. dataSet.Tables.Add(ReMadeTable);
1002.
1003. }
1004.
1005. private void ADDcolums(ref DataTable table)//works
1006. {
1007. //primary key is deafulted as first //PK
1008. // Create a new DataTable.
209
1009. System.Data.DataSet dataSet;
1010. // Declare variables for DataColumn and DataRow objects.
1011. DataColumn column;
1012.
1013.
1014. // Create
new DataColumn, set DataType,
1015. // ColumnName and add to DataTable.
1016. column = new DataColumn();
1017. column.DataType = System.Type.GetType("System.Int32");
1018. column.ColumnName = "PrimaryKey"
;
1019. column.ReadOnly = true
;
1020. table.Columns.Add(column);
1021.
1022. column = new DataColumn();
1023. column.DataType = System.Type.GetType("System.String");
1024. column.ColumnName = "StockCode"
;
1025. column.ReadOnly = true
;
1026. // Add the Column to the DataColumnCollection.
1027. table.Columns.Add(column);
1028.
1029. // Create second column.
1030. column = new DataColumn();
1031. column.DataType = System.Type.GetType("System.String");
1032. column.ColumnName = "Description"
;
1033. column.ReadOnly = true
;
1034. // Add the column to the table.
1035. table.Columns.Add(column);
1036.
1037. column = new DataColumn();
1038. column.DataType = System.Type.GetType("System.Int32");
1039. column.ColumnName = "Quantity"
;
1040. column.ReadOnly = true
;
1041. table.Columns.Add(column);
1042.
1043. column = new DataColumn();
1044. column.DataType = System.Type.GetType("System.String");
1045. column.ColumnName = "InvoiceDate"
;
1046. column.ReadOnly = true
;
1047. table.Columns.Add(column);
1048.
1049. column = new DataColumn();
1050. column.DataType = System.Type.GetType("System.Double");
1051. column.ColumnName = "UnitPrice"
;
1052. column.ReadOnly = true
;
1053. table.Columns.Add(column);
1054.
1055. column = new DataColumn();
1056. column.DataType = System.Type.GetType("System.Int32");
1057. column.ColumnName = "CustomerID"
;
1058. column.ReadOnly = true
;
1059. table.Columns.Add(column);
1060.
1061. column = new DataColumn();
1062. column.DataType = System.Type.GetType("System.String");
1063. column.ColumnName = "Country"
;
1064. column.ReadOnly = true
;
1065. table.Columns.Add(column);
1066.
1067. column = new DataColumn();
1068. column.DataType = System.Type.GetType("System.String");
1069. column.ColumnName = "InvoiceNo"
;
1070. column.ReadOnly = true
;
1071. table.Columns.Add(column);
1072.
1073. column = new DataColumn();
1074. column.DataType = System.Type.GetType("System.Double");
1075. column.ColumnName = "MoneySpent"
;
210
1076. column.ReadOnly = true;
1077. table.Columns.Add(column);
1078.
1079. DataColumn[] PrimaryKeyColumns = new DataColumn[1];
1080. PrimaryKeyColumns[0] = table.Columns["id"];
1081. table.PrimaryKey = PrimaryKeyColumns;
1082.
1083. // Make the ID column the primary key column.
1084. }
1085.
1086. private SQLiteConnection CreateSQLconnection()//works as a methood used within the exicution
1087. {
1088. try
1089. {
1090. SQLiteConnection ll = new SQLiteConnection(@"Data Source =" + filepath);
1091. ll.Open();
1092. return ll;
1093. }
1094. catch (Exception)
1095. {
1096. Console.WriteLine("database file called CustomerData.db not found");
1097.
1098. System.Environment.Exit(1);
1099. throw;
1100. }
1101.
1102. }
1103.
1104. private void ADDrows(ref SQLiteDataReader rdr, ref DataTable table)
1105. {
1106. int y = 0;
1107. if (!File.Exists("BrokenRows " + amountofdataRows))
1108. {
1109. File.Create("BrokenRows " + amountofdataRows).Dispose();
1110. }
1111. using (StreamWriter sw = new StreamWriter("BrokenRows " + amountofdataRows))
1112. {
1113. sw.WriteLine("Broken rows - rowkeys");
1114. DataRow row;
1115. while (rdr.Read())
1116. {
1117. try
1118. {
1119. y++;
1120. //
StockCode,Description,Quantity,InvoiceDate,UnitPrice,CustomerID,Country,InvoiceNo,MoneySpent
1121. row = table.NewRow();
1122. row["PrimaryKey"] = y;
1123. row["StockCode"] = rdr.GetString(1);
1124. row["Description"] = rdr.GetString(2);
1125. row["Quantity"] = rdr.GetInt32(3);
1126. string dashdate = rdr.GetString(4);
1127. string formatted = GetFormat(dashdate);
1128. //Formats the 2-Aug-16 date into a pure numerical date
1129. row["InvoiceDate"] = formatted;
1130. row["UnitPrice"] = rdr.GetDouble(5);
1131. row["CustomerID"] = rdr.GetInt32(6);
1132. row["Country"] = rdr.GetString(7);
1133. row["InvoiceNo"] = rdr.GetInt32(0);
1134. row["MoneySpent"] = Math.Round((rdr.GetInt32(3) * rdr.GetDouble(5)), 2);
1135. table.Rows.Add(row);
1136.
1137.
1138.
1139. }
1140. catch (Exception)
1141. {
211
1142. sw.WriteLine(rdr.GetString(
0));
1143.
}
1144.
1145.
}
1146.
}
1147.
}
1148. private string GetFormat
(string date
)
1149.
{
1150. string day =date.Substring(
0, date.IndexOf('-'));
1151. string s = date.Substring(date.IndexOf('-') +
1,
3);
1152. string month = ""
;
1153.
1154. string year = date.Substring(date.LastIndexOf('-') +
1);
1155. switch (s)
1156.
{
1157. case "Jan"
:
1158. month = "01"
;
1159.
1160. break
;
1161. case "Feb"
:
1162. month = "02"
;
1163.
1164. break
;
1165. case "Mar"
:
1166. month = "03"
;
1167. // code block
1168. break
;
1169. case "Apr"
:
1170. month = "04"
;
1171. // code block
1172. break
;
1173. case "May"
:
1174. month = "05"
;
1175. // code block
1176. break
;
1177. case "Jun"
:
1178. month = "06"
;
1179. // code block
1180. break
;
1181. case "Jul"
:
1182. month = "07"
;
1183. // code block
1184. break
;
1185. case "Aug"
:
1186. month = "08"
;
1187. // code block
1188. break
;
1189. case "Sep"
:
1190. month = "09"
;
1191. // code block
1192. break
;
1193. case "Oct"
:
1194. month = "10"
;
1195. // code block
1196. break
;
1197. case "Nov"
:
1198. month = "11"
;
1199. // code block
1200. break
;
1201. case "Dec"
:
1202. month = "12"
;
1203. // code block
1204. break
;
1205. default
:
1206. // code block
1207. break
;
1208.
}
212
1209. string FormatDate = day + "-" + month + "-" + year;
1210. return FormatDate;
1211. }
1212. }
1213.
1214. class Program
1215. {
1216.
1217. static void Main(string[] args)
1218. {
1219.
1220. MainSet Mainset = new MainSet();
1221.
1222. MMpertrans Pertrans = new MMpertrans();
1223.
1224. Mainset.dataSet.Tables.Add(Pertrans.Create(Mainset.dataSet));
1225.
1226. SpentOver Spent = new SpentOver();
1227.
1228. Mainset.dataSet.Tables.Add(Spent.Create(Mainset.dataSet));
1229.
1230. CQI CQItable = new CQI();
1231.
1232. Mainset.dataSet.Tables.Add(CQItable.Create(Mainset.dataSet));
1233.
1234. MoneyPerDay MMPD = new MoneyPerDay();
1235.
1236. Mainset.dataSet.Tables.Add(MMPD.Create(Mainset.dataSet));
1237.
1238. Pertrans.SaveData();
1239.
1240. Spent.SaveData();
1241.
1242. CQItable.SaveData();
1243.
1244. MMPD.SaveData();
1245.
1246. Pertrans.CreateMesureOfSpreadDocument("MPPerTrans", "MoneySpent");
1247. Spent.CreateMesureOfSpreadDocument("Spent", "MoneySpentOvertime");
1248. CQItable.CreateMesureOfSpreadDocument("CQI", "CQI");
1249. CQItable.CreateMesureOfSpreadDocument("CQI", "Frequency");
1250. MMPD.CreateMesureOfSpreadDocument("MoneyMadePerDay", "MoneySpent");
1251. MMPD.CreateMesureOfSpreadDocument("MoneyMadePerDay", "Frequencyofsale");
1252.
1253. Pertrans.getUQID("MPPerTrans", "MoneySpent", "CustomerID");
1254. Spent.getUQID("Spent", "MoneySpentOvertime", "CustomerID");
1255. CQItable.getUQID("CQI", "CQI", "CustomerID");
1256. CQItable.getUQID("CQI", "Frequency", "CustomerID");
1257. MMPD.getUQID("MoneyMadePerDay", "MoneySpent", "Day");
1258. MMPD.getUQID("MoneyMadePerDay", "Frequencyofsale", "Day");
1259.
1260. Console.WriteLine("stuff");
1261.
1262. Console.ReadLine();
1263. }
1264. }
1265. }
